[build-system]
    build-backend = "poetry.core.masonry.api"
    requires      = ["poetry-core>=1.0.0"]

[tool.poetry] # https://python-poetry.org/docs/pyproject/
    authors     = ["Nate Landau <github@natenate.org>"]
    description = "File Manager for the Johnny Decimal System"
    homepage    = "https://github.com/natelandau/jdfile"
    license     = "GNU AFFERO"
    name        = "jdfile"
    readme      = "README.md"
    repository  = "https://github.com/natelandau/jdfile"
    version     = "1.1.5"

    [tool.poetry.scripts] # https://python-poetry.org/docs/pyproject/#scripts
        jdfile = "jdfile.cli:app"

    [tool.poetry.dependencies]
        inflect     = "^7.0.0"
        loguru      = "^0.7.2"
        nltk        = "^3.8.1"
        python      = "^3.10"
        questionary = "^2.0.1"
        rich        = "^13.6.0"
        shellingham = "^1.5.4"
        tomli       = "^2.0.1"
        typer       = "^0.9.0"

    [tool.poetry.group.test.dependencies]
        hypothesis     = "^6.88.3"
        pytest         = "^7.4.3"
        pytest-clarity = "^1.0.1"
        pytest-mock    = "^3.12.0"
        pytest-sugar   = "^0.9.7"
        pytest-xdist   = "^3.3.1"

    [tool.poetry.group.dev.dependencies]
        commitizen            = "^3.12.0"
        coverage              = "^7.3.0"
        mypy                  = "^1.8.0"
        pdoc                  = "^14.1.0"
        poethepoet            = "^0.24.2"
        pre-commit            = "^3.5.0"
        ruff                  = "^0.2.1"
        sh                    = "^2.0.6"
        shellcheck-py         = "^0.9.0.6"
        types-python-dateutil = "^2.8.19.14"
        typos                 = "^1.16.23"
        vulture               = "^2.10"

[tool.commitizen]
    bump_message             = "bump(release): v$current_version â†’ v$new_version"
    tag_format               = "v$version"
    update_changelog_on_bump = true
    version                  = "1.1.5"
    version_files            = ["pyproject.toml:version", "src/jdfile/__version__.py:__version__"]

[tool.coverage.report] # https://coverage.readthedocs.io/en/latest/config.html#report
    exclude_lines = [
        'def __repr__',
        'except [\w\s\._]+ as .*:',
        'log\.critical',
        'log\.debug',
        'log\.error',
        'log\.exception',
        'log\.info',
        'log\.success',
        'log\.trace',
        'log\.warning',
        'pragma: no cover',
        'raise Abort',
        'raise Exit',
        'raise typer\.Exit',
    ]
    fail_under = 50
    precision = 1
    show_missing = true
    skip_covered = true

[tool.coverage.run]
    branch       = true
    command_line = "--module pytest"
    data_file    = "reports/.coverage"
    source       = ["src"]

[tool.coverage.xml]
    output = "reports/coverage.xml"

[tool.mypy] # https://mypy.readthedocs.io/en/latest/config_file.html
    disallow_any_unimported = false
    disallow_subclassing_any = false
    disallow_untyped_decorators = false
    disallow_untyped_defs = true
    exclude = [
        'tests/', # TOML literal string (single-quotes, regex okay, no escaping necessary)
    ]
    follow_imports = "normal"
    ignore_missing_imports = true
    junit_xml = "reports/mypy.xml"
    no_implicit_optional = true
    pretty = false
    show_column_numbers = true
    show_error_codes = true
    show_error_context = true
    strict_optional = false
    warn_redundant_casts = true
    warn_unreachable = false
    warn_unused_ignores = false

[tool.pytest.ini_options]
    addopts        = "--color=yes --doctest-modules --exitfirst --failed-first --strict-config --strict-markers --junitxml=reports/pytest.xml"
    filterwarnings = ["error", "ignore::DeprecationWarning"]
    testpaths      = ["src", "tests"]
    xfail_strict   = true

[tool.ruff] # https://github.com/charliermarsh/ruff
    exclude = [
        ".bzr",
        ".direnv",
        ".eggs",
        ".git",
        ".hg",
        ".mypy_cache",
        ".nox",
        ".pants.d",
        ".pytype",
        ".ruff_cache",
        ".svn",
        ".tox",
        ".venv",
        "__pypackages__",
        "_build",
        "buck-out",
        "build",
        "dist",
        "node_modules",
        "venv",
    ]
    fix = true
    ignore = [
        "B006",
        "B008",
        "D107",
        "D203",
        "D204",
        "D213",
        "D215",
        "D404",
        "D406",
        "D407",
        "D408",
        "D409",
        "D413",
        "E266",
        "E501",
        "ISC001",
        "N805",
        "PGH001",
        "PGH003",
        "PLR0913",
        "PLR0917",
        "PLW3201",
        "S311",
        "T201",
        "UP007",
    ]
    ignore-init-module-imports = true
    line-length = 100
    output-format = "grouped"
    per-file-ignores = { "cli.py" = [
        "PLR0912",
        "PLR0913",
    ], "tests/*.py" = [
        "PLR0913",
        "PLR2004",
        "S101",
    ] }
    select = [
        "A",     # flake8-builtins
        "ARG",   # flake8-unused-arguments
        "ASYNC", # flake8-async
        "B",     # flake8-bugbear
        "BLE",   # flake8-blind-exception
        "C4",    # flake8-comprehensions
        "C90",   # McCabe
        "D",     # pydocstyle
        "E",     # pycodestyle Errors
        "EM",    # flake8-errmsg
        "ERA",   # flake8-eradicate
        "EXE",   # flake8-executable
        "F",     # pyflakes
        "FA",    # flake8-future
        "FLY",   # flynt
        "FURB",  # refurb
        "I",     # iSort
        "ISC",   # flake8-implicit-str-concat
        "N",     # Pep8-naming
        "NPY",   # flake8-numpy
        "PERF",  # Perflint
        "PGH",   # pygrep-hooks
        "PL",    # pylint
        "PLC",   # pylint Convention
        "PLE",   # pylint Error
        "PLR",   # pylint Refactor
        "PLW",   # pylint Warning
        "PT",    # flake8-pytest-style
        "PTH",   # flake8-use-pathlib
        "Q",     # flake8-quotes
        "RET",   # flake8-return
        "RUF",   # Ruff-specific rules
        "S",     # flake8-bandit
        "SIM",   # flake8-simplify
        "T20",   # flake8-print
        "TID",   # flake8-tidy-imports
        "TRY",   # tryceratops
        "UP",    # pyupgrade
        "W",     # pycodestyle Warnings
        "YTT",   # flake8-2020
        # "DTZ",   # flake8-datetimez
    ]
    src = ["src", "tests"]
    target-version = "py310"
    unfixable = ["ERA001", "F401", "F841", "UP007"]

    [tool.ruff.mccabe]
        # Unlike Flake8, default to a complexity level of 10.
        max-complexity = 10

    [tool.ruff.pydocstyle]
        convention = "google"

    [tool.ruff.pylint]
        max-args = 6

    [tool.ruff.format]
        indent-style              = "space"
        line-ending               = "auto"
        quote-style               = "double"
        skip-magic-trailing-comma = false

[tool.vulture] # https://pypi.org/project/vulture/
    # exclude = ["file*.py", "dir/"]
    # ignore_decorators = ["@app.route", "@require_*"]
    ignore_names = ["args", "kwargs", "request", "version"]
    # make_whitelist = true
    min_confidence = 80
    paths          = ["src", "tests"]
    sort_by_size   = true
    verbose        = false

[tool.poe.tasks]

    [tool.poe.tasks.docs]
        cmd = """
    pdoc
      --docformat google
      --output-directory docs
      src/jdfile
    """
        help = "Generate this package's docs"

    [tool.poe.tasks.lint]
        help = "Lint this package"

        [[tool.poe.tasks.lint.sequence]]
            shell = "ruff --preview --no-fix src/"

        [[tool.poe.tasks.lint.sequence]]
            shell = "ruff format --check src/ tests/"

        [[tool.poe.tasks.lint.sequence]]
            shell = "poetry check"

        [[tool.poe.tasks.lint.sequence]]
            shell = "mypy --warn-unused-ignores --config-file pyproject.toml src/"

        [[tool.poe.tasks.lint.sequence]]
            shell = "vulture src/ tests/"

        [[tool.poe.tasks.lint.sequence]]
            shell = "yamllint ."

        [[tool.poe.tasks.lint.sequence]]
            shell = "typos"

[tool.poe.tasks.test]
    help = "Test this package"

    [[tool.poe.tasks.test.sequence]]
        cmd = "coverage run"

    [[tool.poe.tasks.test.sequence]]
        cmd = "coverage report"

    [[tool.poe.tasks.test.sequence]]
        cmd = "coverage xml"
