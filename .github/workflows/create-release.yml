---
name: "Create Release"

on:
    push:
        tags:
            - "v*"

concurrency:
    group: ${{ github.workflow }}-${{ github.ref }}
    cancel-in-progress: true

permissions:
    contents: write

jobs:
    auto-release:
        name: Create Release
        runs-on: "ubuntu-latest"
        strategy:
            fail-fast: true
            matrix:
                python-version: ["3.11"]
        steps:
            - name: Checkout repository
              uses: actions/checkout@v4
              with:
                  fetch-depth: 0

            - name: Setup Python, uv, and the package
              uses: ./.github/actions/setup_python_env

            # ----------------------------------------------
            #    Grab version number
            # ----------------------------------------------

            - name: Add version to environment vars
              run: |
                  PROJECT_VERSION=$(python -c 'import tomli; print(tomli.load(open("pyproject.toml", "rb"))["project"]["version"])')
                  echo "PROJECT_VERSION=$PROJECT_VERSION" >> $GITHUB_ENV

            # ----------------------------------------------
            # Confirm we did, in fact, update the version
            # ----------------------------------------------

            - name: Check if tag version matches project version
              run: |
                  TAG=$(git describe HEAD --tags --abbrev=0)
                  echo $TAG
                  echo $PROJECT_VERSION
                  if [[ "$TAG" != "v$PROJECT_VERSION" ]]; then exit 1; fi
                  echo "CURRENT_TAG=refs/tags/${TAG}" >> $GITHUB_ENV

            # ----------------------------------------------
            # Test and then build the package
            # ----------------------------------------------

            - name: Run tests
              shell: bash
              run: uv run poe test

            - name: Build the package
              shell: bash
              run: uvx --from build pyproject-build --installer uv

            # ----------------------------------------------
            # Generate release notes
            # ----------------------------------------------

            # - name: Release Notes
            #   run: git log $(git describe HEAD~ --tags --abbrev=0)..HEAD --pretty='format:* %h %s' --no-merges >> ".github/RELEASE-TEMPLATE.md"

            - name: Get notes
              id: generate_notes
              uses: anmarkoulis/commitizen-changelog-reader@master
              with:
                  tag_name: ${{ env.CURRENT_TAG }}
                  changelog: CHANGELOG.md

            # ----------------------------------------------
            # Build draft release (Note: Will need to manually publish)
            # ----------------------------------------------

            - name: Create Release Draft
              uses: softprops/action-gh-release@v2
              with:
                  body: ${{join(fromJson(steps.generate_notes.outputs.notes).notes, '')}}
                  draft: false
                  files: |
                      dist/*-${{env.PROJECT_VERSION}}-py3-none-any.whl
                      dist/*-${{env.PROJECT_VERSION}}.tar.gz
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    publish-to-pypi:
        runs-on: ubuntu-latest
        needs: auto-release
        env:
            TWINE_USERNAME: ${{ secrets.TWINE_USERNAME }}
            TWINE_PASSWORD: ${{ secrets.TWINE_PASSWORD }}
        strategy:
            matrix:
                python-version: ["3.11"]
        steps:
            - name: Checkout repository
              uses: actions/checkout@v4

            - name: Setup Python, uv, and the package
              uses: ./.github/actions/setup_python_env

            - name: Build the package
              shell: bash
              run: uvx --from build pyproject-build --installer uv

            - name: Upload to PyPi
              shell: bash
              run: uvx twine upload dist/*
